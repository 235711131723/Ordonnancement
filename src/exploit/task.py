from typing import *
from uuid import uuid4

from exploit.variable import Variable
from exploit.instruction import Instruction, Assign, Operator, Read, Constant

class Task:
    """Here is an exemple of how to write instructions for a task :

        t = Task(instructions=[
            Assign(Variable('x'), 10),
            Assign(Variable('y'), 22),
            Add(Variable['x'], Variable['y'], Variable('z')),
            Sub(Variable['z'], 40, Variable['z'])
        ])
    """
    ID = 1

    def __init__(self,
        instructions:List[Instruction] = []
    ):
        self.id = Task.ID
        self.instructions = instructions

        self.read_domain = self.__get_read_domain()
        self.write_domain = self.__get_write_domain()

        Task.ID += 1

    def __call__(self):
        """Execute the instructions sequentially."""

        for i in self.instructions:
            i()

    def __get_read_domain(self) -> Set[Variable]:
        """Get the read domain recursively."""

        def recurse(i:Instruction) -> Set[Variable]:
            result = set()

            if isinstance(i, Read):
                result.add(i.variable)
            elif isinstance(i, Operator):
                result = result.union(recurse(i.i1), recurse(i.i2))

            return result

        ####################
        result = set()

        for i in self.instructions:
            result = result.union(recurse(i))
        
        return result

    def __get_write_domain(self) -> Set[Variable]:
        """Get the write domain recursively."""

        def recurse(i:Instruction) -> Set[Variable]:
            result = set()

            if isinstance(i, Assign):
                result.add(i.variable)
            elif isinstance(i, Operator) and i.variable:
                result.add(i.variable)

            return result

        ####################
        result = set()

        for i in self.instructions:
            result = result.union(recurse(i))
        
        return result

    def __repr__(self) -> str:
        return 'T{}'.format(self.id)